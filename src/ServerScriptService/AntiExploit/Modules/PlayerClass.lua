local RootFolder = script:FindFirstAncestor("AntiExploitModule")

local Lib = RootFolder.Lib
local Maid = require(Lib.Maid)
local Signal = require(Lib.Signal)
local Promise = require(Lib.Promise)

local ChecksList = require(RootFolder.Checks)

local FlagClass = require(RootFolder.Modules.FlagClass)

local PlayerClass = {}
PlayerClass.__index = PlayerClass

function PlayerClass.new(player)
    local self = setmetatable({
        ["Player"] = player,
        ["Flags"] = {},

        ["Physics"] = {
            ["IgnoreNextCFrame"] = false,
            ["IsSitting"] = false,

            ["Character"] = nil,
            ["Humanoid"] = nil,
            ["Head"] = nil,
            ["Root"] = nil,

            ["LastCFrame"] = nil,
            ["CurrentCFrame"] = nil,
        },
        ["__maid"] = Maid.new(),
    }, PlayerClass)

    self.__maid:GiveTask(player.CharacterAdded:Connect(function()
        table.clear(self.Physics)
    end))

    return self
end

function PlayerClass:Destroy()
    self.__maid:DoCleaning()
end

function PlayerClass:PreStepUpdate() --Performed at the begining of every step to ensure all player information is correct and up to date
    local player = self.Player
    local character = player.Character
    local humanoid
    local headPart
    local rootPart
    local isSitting

    local missingCriticalInstances = false

    if not character then
        missingCriticalInstances = true
    else 
        humanoid = character:FindFirstChildOfClass("Humanoid")
        headPart = character:FindFirstChild("Head")

        if not humanoid or not headPart then
            missingCriticalInstances = true
        else
            rootPart = humanoid.RootPart
            isSitting = typeof(humanoid.SeatPart) ~=  nil

            if not rootPart then
                missingCriticalInstances = true
            end
        end
    end
    
    if missingCriticalInstances then
        return false
    else
        local physics = self.Physics 
        physics.IsSitting = isSitting
        physics.Character = character 
        physics.Humanoid = humanoid 

        physics.Root = rootPart
        physics.Head = headPart

        physics.CurrentCFrame = rootPart.CFrame
        if not physics.LastCFrame then
            physics.LastCFrame = physics.CurrentCFrame
        end

        return true 
    end
end

function PlayerClass:PostStepUpdate()
    local physics = self.Physics
    physics.LastCFrame = physics.CurrentCFrame

    if physics.IgnoreNextCFrame then
        physics.IgnoreNextCFrame = false
    end
end

function PlayerClass:Step()
    local isSuccessfullUpdate = self:PreStepUpdate()

    if isSuccessfullUpdate then
        for name, exploit in pairs(ChecksList) do 
            local passed, message = exploit:Check(self)

            if not passed then 
                local newFlag = FlagClass.new(message, #self.Flags + 1)
                table.insert(self.Flags, newFlag)
                warn(string.format("%s Failed %s Check: %s", self.Player.Name, name, message))
            end
        end
    else

    end
end


return PlayerClass
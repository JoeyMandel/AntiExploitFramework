local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Modules = script.Modules
local PlayerClass = Modules.PlayerClass

local Lib = script.Lib
local Maid = require(Lib.Maid)
local Signal = require(Lib.Signal)

local config = require(Modules.Config)
local DEBUG_MODE = config.DebugMode
local WHITELIST_CREATOR = config.WhiteListGameCreator
local FLAGS_UNTIL_SUSPICIOUS = config.FlagsUntilSuspicious

local AntiExploit = {}
AntiExploit.Players = {}
AntiExploit.SuspiciousPlayers = {}

AntiExploit.IsRunning = false

AntiExploit.OnFlagged = Signal.new()
AntiExploit.OnSuspiciousPlayerAdded = Signal.new()

AntiExploit.__maid = Maid.new()

function AntiExploit:AddPlayer(player)
    local obj = PlayerClass.new(player)
    self.Players[player.UserId] = obj
    self.__maid[player.UserId] = obj


    local onFlagConnection
    onFlagConnection = obj.OnFlagged:Connect(function(flag)
        if flag.FlagNumber > 5 then
            onFlagConnection:Disconnect()
            self:IsolateSuspiciousPlayer(obj)
        end
    end)
    
    if DEBUG_MODE then
        print(string.format("[AntiExploitModule]: Added %s", player.Name))
    end
end

function AntiExploit:RemovePlayer(player)
    self.Players[player.UserId] = nil
    self.__maid[player.UserId] = nil

    if DEBUG_MODE then
        print(string.format("Removed %s", player.Name))
    end
end

function AntiExploit:IsolateSuspiciousPlayer(playerObj)
    local player = playerObj.Player

    self.SuspiciousPlayers[player.UserId] = playerObj
    self.OnSuspiciousPlayerAdded:Fire()
    
    if DEBUG_MODE then
        warn(string.format("[AntiExploitModule]: %s was flagged more than 5 times", player.Name))
    end
end

function AntiExploit:Start()
    print("[AntiExploitModule]: AntiExploitModule was Started")

    self.__maid:GiveTask(self.OnFlagged)

    for _, player in pairs(Players:GetPlayers()) do
        self:AddPlayer(player)
    end
    self.__maid:GiveTask(Players.PlayerAdded:Connect(function(player)
        self:AddPlayer(player)
    end))
    self.__maid:GiveTask(Players.PlayerRemoving:Connect(function(player)
        self:RemovePlayer(player)
    end))

    self.__maid:GiveTask(RunService.Heartbeat:Connect(function()
        for _, player in pairs(self.Players) do
            player:Step()
        end
    end))
end

function AntiExploit:Stop()
    print("[AntiExploitModule]: AntiExploitModule was Stopped")

    self.__maid:DoCleaning()
end

return AntiExploit
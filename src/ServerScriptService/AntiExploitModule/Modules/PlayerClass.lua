local RootFolder = script:FindFirstAncestor("AntiExploitModule")

local Lib = RootFolder.Lib
local Maid = require(Lib.Maid)
local Signal = require(Lib.Signal)

local Modules = RootFolder.Modules
local Config = require(Modules.Config)

local ChecksList = require(RootFolder.Checks)

local FlagClass = require(RootFolder.Modules.FlagClass)

local DEBUG_MODE = Config.DebugMode

local PlayerClass = {}
PlayerClass.__index = PlayerClass

function PlayerClass.new(player)
    local self = setmetatable({
        ["Player"] = player,
        ["Flags"] = {},
        ["LastStepped"] = nil,

        ["Physics"] = {
            ["IgnoreNextCFrame"] = false,
            ["IsSitting"] = false,
            ["LastTimeInAir"] = false,

            ["Character"] = nil,
            ["Humanoid"] = nil,
            ["Head"] = nil,
            ["Root"] = nil,

            ["LastCFrame"] = nil,
            ["CurrentCFrame"] = nil,
        },

        ["OnFlagged"] = Signal.new(),
        ["__maid"] = Maid.new(),
    }, PlayerClass)

    self.__maid:GiveTask(player.CharacterAdded:Connect(function(character)
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        table.clear(self.Physics)

        humanoid.RootPart:GetPropertyChangedSignal("CFrame"):Connect(function()
            self.Physics.IgnoreNextCFrame = true
        end)
    end))

    return self
end

function PlayerClass:Destroy()
    self.__maid:DoCleaning()
end

function PlayerClass:Flag(message)
    local newFlag = FlagClass.new(message, #self.Flags + 1)
    table.insert(self.Flags, newFlag)

    self.OnFlagged:Fire(newFlag)
end

function PlayerClass:ResetNetworkOwner()
    for _, part in pairs(self.Physics.Character:GetChildren()) do
        if part:IsA("BasePart") then
            part:SetNetworkOwner(nil)
        end
    end

    task.delay(1, function()
        for _, part in pairs(self.Physics.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part:SetNetworkOwner(self.Player)
            end
        end
    end)
end

function PlayerClass:PreStepUpdate() --Performed at the begining of every step to ensure all player information is correct and up to date
    local player = self.Player
    local character = player.Character
    local humanoid
    local headPart
    local rootPart
    local isSitting

    local missingCriticalInstances = false

    if not character or self.Physics.IgnoreNextCFrame then
        missingCriticalInstances = true
        self.Physics.CurrentCFrame = false
    else 
        humanoid = character:FindFirstChildOfClass("Humanoid")
        headPart = character:FindFirstChild("Head")

        if not humanoid or not headPart then
            missingCriticalInstances = true
        else
            rootPart = humanoid.RootPart
            isSitting = typeof(humanoid.SeatPart) ~=  nil

            if not rootPart then
                missingCriticalInstances = true
            end
        end
    end
    
    if missingCriticalInstances then
        return false
    else
        local physics = self.Physics 
        physics.IsSitting = isSitting
        physics.Character = character 
        physics.Humanoid = humanoid 

        physics.Root = rootPart
        physics.Head = headPart

        physics.LastCFrame = physics.CurrentCFrame or rootPart.CFrame
        physics.CurrentCFrame = rootPart.CFrame

        return true 
    end
end

function PlayerClass:PostStepUpdate()
    self.LastStepped = tick()
end

function PlayerClass:Step()
    local isSuccessfullUpdate = self:PreStepUpdate()

    if isSuccessfullUpdate then
        for name, exploit in pairs(ChecksList) do 
            local passed, message = exploit:Check(self)

            if not passed then 
                self:Flag(message)
                exploit:Punish(self)
                self:ResetNetworkOwner()
                warn(string.format("[AntiExploitFramework]: %s failed a check: \n Check Name: %s \n Message from Check: %s", self.Player.Name, name, message))
            end
        end

    else
        local physics = self.Physics
    
        if physics.IgnoreNextCFrame then
            physics.IgnoreNextCFrame = false
        end
    end
    
    self:PostStepUpdate()
end


return PlayerClass
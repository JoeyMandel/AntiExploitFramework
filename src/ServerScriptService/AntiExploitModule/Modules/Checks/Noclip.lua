local RootFolder = script.Parent.Parent.Parent

local Debugger = require(RootFolder.Modules.Debugger)

local NoClipCheck = {}

function NoClipCheck.Check(playerObj)
	local passed = true
	local returnMessage = ""
	local physicsInfo = playerObj.PhysicsInfo
	local characterInfo = playerObj.CharacterInfo
	local player = playerObj.Player

	local rootPos = physicsInfo.CurrentCFrame.Position
	local lastPos = physicsInfo.LastCFrame.Position

	local ignore = {}
	for _, player in pairs(game.Players:GetPlayers())do
		if player.Character then
			table.insert(ignore,player.Character)
		end
	end

	local raycastParameters = RaycastParams.new()
	raycastParameters.FilterDescendantsInstances = ignore
	raycastParameters.FilterType = Enum.RaycastFilterType.Exclude
    raycastParameters.RespectCanCollide = true
	raycastParameters.IgnoreWater = true

	local result = workspace:Raycast(lastPos,(rootPos - lastPos), raycastParameters)

    if result then
		local part = result.Instance
		if part:IsA("BasePart") then
			if part:CanCollideWith(characterInfo.HeadPart) then
				passed = false
                physicsInfo.SkipNextStep = true
				
				Debugger.Print(
					string.format("[NoclipExploitChecker]: %s went through a wall... Last Position: (%s); Target Position: (%s)", playerObj.Player.Name, tostring(lastPos), tostring(rootPos)),
					2
				)
                returnMessage = player.Name .."'s path went through a wall or something that isn't a descendant of another character. Part:"..part:GetFullName()
			end
		end
	end

	return passed,returnMessage
end

function NoClipCheck.Punish(playerObj)
	playerObj.CharacterInfo.CharacterModel:SetPrimaryPartCFrame(playerObj.PhysicsInfo.LastCFrame)
end

return NoClipCheck

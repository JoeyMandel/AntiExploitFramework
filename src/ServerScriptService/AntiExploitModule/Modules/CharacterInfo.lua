local Debugger = require(script.Parent.Debugger)

export type CharacterInfo = {
    ["CharacterModel"]: Model,
    ["HeadPart"]: BasePart,
    ["RootPart"]: BasePart,
    ["Humanoid"]: Humanoid,

    ["IsSitting"]: boolean,
    ["IsMissingCriticalPart"]: boolean
}

local onFail = {
    ["IsMissingCriticalPart"] = true,
}

local CharacterInfoFactory = {}

function CharacterInfoFactory.create(player: Player): CharacterInfo
    local characterModel = player.Character

    if not characterModel then
        Debugger.Warn(string.format("Player %s: does not have a character", player.Name), 2)
        return onFail
    end

    local humanoid = characterModel:FindFirstChildOfClass("Humanoid")
    local headPart = characterModel:FindFirstChild("Head")

    if not humanoid or not headPart then
        Debugger.Warn(string.format("Player %s: was missing a critical character part", player.Name), 2)
        return onFail
    end

    if not humanoid.RootPart then
        Debugger.Warn(string.format("Player %s: was missing a RootPart", player.Name), 2)
        return onFail
    end

    return {
        ["CharacterModel"] = characterModel,
        ["HeadPart"] = headPart,
        ["Humanoid"] = humanoid,
        ["RootPart"] = humanoid.RootPart,
        ["IsSitting"] = humanoid.SeatPart ~=  nil,
        ["IsMissingCriticalPart"] = false,
    }
end



return CharacterInfoFactory

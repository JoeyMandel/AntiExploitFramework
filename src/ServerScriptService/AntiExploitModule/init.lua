local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Modules = script.Modules

local Flag = require(Modules.Flag)
local PlayerClass = require(Modules.PlayerClass)

local Lib = script.Lib
local MaidClass = require(Lib.Maid)
local SignalClass = require(Lib.Signal)

local config = require(script.CONFIG)

local Debugger = require(Modules.Debugger)
local FLAGS_UNTIL_SUSPICIOUS = config.FlagsUntilSuspicious

local AntiExploit = {}
--Private variables
AntiExploit.__players = {}
AntiExploit.__suspiciousPlayers = {}
AntiExploit.__flags = {}
AntiExploit.__isRunning = false
AntiExploit.__maid = MaidClass.new()

--Public vars
AntiExploit.OnSuspiciousPlayerAdded = SignalClass.new()


function AntiExploit:AddPlayer(player)
    local userid = player.UserId
    
    if table.find(config.Whitelist, userid) then
        return
    end

    local obj = PlayerClass.new(player)
    self.__players[userid] = obj
    self.__maid[userid] = obj
    self.__flags[userid] = self.__flags[userid] or {}

    obj.OnFlagged:Connect(function(message)
        local flag = Flag.create(message)
        local flags = self.__flags[userid] 

        table.insert(flags, flag)
        
        if #flags > FLAGS_UNTIL_SUSPICIOUS then
            self:FlagSuspiciousPlayer(player)
        end
    end)
    Debugger.Print(string.format("[AntiExploitModule]: Added Player %s to tracked players", player.Name), 1)
end

function AntiExploit:RemovePlayer(player)
    self.__players[player.UserId] = nil
    self.__maid[player.UserId] = nil

    Debugger.Print(string.format("[AntiExploitModule]: Removed Player %s from tracked players", player.Name), 1)
end

function AntiExploit:FlagSuspiciousPlayer(player)
    if self.__suspiciousPlayers[player.UserId] then
        return
    end

    self.__suspiciousPlayers[player.UserId] = player
    self.OnSuspiciousPlayerAdded:Fire(player)
    
    Debugger.Warn(string.format("[AntiExploitModule]: Player %s is marked suspcious! They were flagged more than %d times", player.Name, FLAGS_UNTIL_SUSPICIOUS), 1)
end

function AntiExploit:Start()
    Debugger.Print("[AntiExploitModule]: Initializing AntiExploitModule", 1)
    self.__isRunning = true
    for _, player in pairs(Players:GetPlayers()) do
        self:AddPlayer(player)
    end
    self.__maid:GiveTask(Players.PlayerAdded:Connect(function(player)
        self:AddPlayer(player)
    end))
    self.__maid:GiveTask(Players.PlayerRemoving:Connect(function(player)
        self:RemovePlayer(player)
    end))

    self.__maid:GiveTask(RunService.PostSimulation:Connect(function()
        for _, player in pairs(self.__players) do
            player:Step()
        end
    end))
end

function AntiExploit:Stop()
    Debugger.Print("[AntiExploitModule]: STOPPING AntiExploitModule", 1)
    self.__isRunning = false
    self.__maid:DoCleaning()
end

function AntiExploit:__isRunning(): boolean
    return self.__isRunning
end

function AntiExploit:GetSuspiciousPlayers(): table
    return table.clone(self.__suspiciousPlayers)
end

function AntiExploit:GetPlayerFlags(player): table
    return table.clone(self.__flags[player])
end

return AntiExploit
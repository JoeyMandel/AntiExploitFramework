local RootFolder = script:FindFirstAncestor("AntiExploitModule")

local Modules = RootFolder.Modules
local Config = require(Modules.Config)

local MAX_SECONDS_IN_FLIGHT = Config.MaximumSecondsInFlight

local FlyCheck = {}

local function dist(v1,v2)
	return (v1-v2).Magnitude
end

function FlyCheck:Check(playerObj)
	local passed = true
	local returnMessage = ""

	local playerPhysics = playerObj.Physics
	local player = playerObj.Player

	local rootPos = playerPhysics.CurrentCFrame.Position
	local bottomPos = rootPos - Vector3.new(0,10,0)

	local RaycastParameters = RaycastParams.new()
	RaycastParameters.FilterDescendantsInstances = {player.Character}
	RaycastParameters.FilterType = Enum.RaycastFilterType.Blacklist

	local result = workspace:Raycast(rootPos,(bottomPos- rootPos).Unit * dist(bottomPos,rootPos),RaycastParameters)
	local isGoodTerrain = false
	local areGoodParts = false

	if not result then 
		local rad = Vector3.new(10, 10,10)
		local searchRegion = Region3.new(rootPos - rad, rootPos + rad)

        local overlapParams = OverlapParams.new()
        overlapParams.FilterDescendantsInstances = {player.Character}

        for _, part in pairs(workspace:GetPartBoundsInRadius(rootPos, 10, overlapParams)) do
			if part:CanCollideWith(playerPhysics.Head) then
				local result = workspace:Raycast(rootPos,(part.Position - rootPos).Unit * 20,RaycastParameters)
				if result then 
					areGoodParts = true
					break
				end
			end
		end
        
		--Checks for valid terrain
		local materials = workspace.Terrain:ReadVoxels(searchRegion:ExpandToGrid(4), 4)
		for _, x in ipairs(materials) do
			if isGoodTerrain then
				break
			end
			for _, y in ipairs(x) do
				if isGoodTerrain then
					break
				end
				for _, cell in ipairs(y) do
					if cell ~= Enum.Material.Air then
						isGoodTerrain = true
						break
					end
				end
			end
		end
	end

	if not result and not isGoodTerrain and not areGoodParts then
		playerPhysics.LastTimeInAir = playerPhysics.LastTimeInAir or tick()
        
		if tick() - playerPhysics.LastTimeInAir > MAX_SECONDS_IN_FLIGHT then
			passed = false
			playerPhysics.IgnoreNextCFrame = true

			returnMessage = player.Name .." was in the air for longer than ".. tostring(MAX_SECONDS_IN_FLIGHT).." seconds..."
			playerPhysics.LastTimeInAir = false
		end

	elseif result or isGoodTerrain or areGoodParts then
		playerPhysics.LastTimeInAir = false
	end

	return passed, returnMessage
end

function FlyCheck:Punish(playerObj)
	playerObj.Player:LoadCharacter()
end

return FlyCheck
